{"meta":{"title":"Shane's Blog","subtitle":"Shane's Blog","description":"","author":"Shane Han","url":"http://shanehan.tech","root":"/"},"pages":[{"title":"about","date":"2020-03-16T12:14:47.000Z","updated":"2020-12-29T08:50:29.210Z","comments":true,"path":"about/index.html","permalink":"http://shanehan.tech/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-03-16T12:13:56.000Z","updated":"2020-12-29T08:50:29.210Z","comments":true,"path":"categories/index.html","permalink":"http://shanehan.tech/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2020-03-16T12:15:24.000Z","updated":"2020-12-29T08:50:29.210Z","comments":true,"path":"contact/index.html","permalink":"http://shanehan.tech/contact/index.html","excerpt":"","text":""},{"title":"friends","date":"2020-03-16T12:16:04.000Z","updated":"2020-12-29T08:50:29.210Z","comments":true,"path":"friends/index.html","permalink":"http://shanehan.tech/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-03-16T12:14:37.000Z","updated":"2020-12-29T08:50:29.214Z","comments":true,"path":"tags/index.html","permalink":"http://shanehan.tech/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2020-12-29T08:50:29.210Z","updated":"2020-12-29T08:50:29.210Z","comments":true,"path":"posts/4a17b156/","link":"","permalink":"http://shanehan.tech/posts/4a17b156/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"如何创建一个Task","slug":"Apollo/如何创建一个Task","date":"2020-06-11T13:33:55.000Z","updated":"2020-12-29T08:50:29.210Z","comments":true,"path":"posts/3add8ad6/","link":"","permalink":"http://shanehan.tech/posts/3add8ad6/","excerpt":"","text":"Step 1: 创建task需要的相关文件 在planning/tasks中的decider或者optimizer中创建对应的task目录，如abreast_decider. 新建源文件，如abreast_decider.cc和abreast_decider.h abreast_decider.cc模板: #include &quot;modules/planning/tasks/deciders/abreast_decider/abreast_decider.h&quot; namespace apollo { namespace planning { using apollo::common::Status; AbreastDecider::AbreastDecider(const TaskConfig &amp;config) : Decider(config) { SetName(&quot;AbreastDecider&quot;); } Status AbreastDecider::Process( Frame *const frame, ReferenceLineInfo *const reference_line_info) { return Status::OK(); } } } ``` --- abreast_decider.h模板: ``` #ifndef __REINFORCEMENT_LEARNING_DECIDER_H #define __REINFORCEMENT_LEARNING_DECIDER_H #include &quot;modules/planning/proto/decider_config.pb.h&quot; #include &quot;modules/planning/tasks/deciders/decider.h&quot; #include &quot;modules/planning/common/planning_gflags.h&quot; namespace apollo { namespace planning { class AbreastDecider : public Decider { public: explicit AbreastDecider(const TaskConfig &amp;config); private: common::Status Process(Frame *frame, ReferenceLineInfo *reference_line_info) override; }; } // namespace planning } // namespace apollo #endif ``` 新建BUILD文件，用于Bazel编译使用。如下 load(&quot;//tools:cpplint.bzl&quot;, &quot;cpplint&quot;) package(default_visibility = [&quot;//visibility:public&quot;]) cc_library( name = &quot;abreast_decider&quot;, srcs = [ &quot;abreast_decider.cc&quot;, ], hdrs = [ &quot;abreast_decider.h&quot;, ], copts = [&quot;-DMODULE_NAME=\\\\\\&quot;planning\\\\\\&quot;&quot;], deps = [ &quot;//modules/planning/tasks/deciders:decider&quot;, &quot;//modules/planning/common:planning_gflags&quot;, &quot;//modules/planning/common:reference_line_info&quot;, ], ) cpplint() Step 2: 注册task 在task_factory.cc中保护对应的头文件，如： #include &quot;modules/planning/tasks/deciders/abreast_decider/abreast_decider.h&quot; 注册task进task_factory中。其中修改ABREAST_DECIDER——这是你在planning conf里面调用的名字；AbreastDecider是在你的task源文件中定义的decider类的名字。 task_factory_.Register(TaskConfig::ABREAST_DECIDER, [](const TaskConfig&amp; config) -&gt; Task* { return new AbreastDecider(config); }); 给task_factory 添加依赖。修改modules/planning/tasks/BUILD，给cc_library/deps添加abreast_decider的依赖。如下 cc_library( name = &quot;task_factory&quot;, srcs = [ &quot;task_factory.cc&quot;, ], hdrs = [ &quot;task_factory.h&quot;, ], copts = [&quot;-DMODULE_NAME=\\\\\\&quot;planning\\\\\\&quot;&quot;], deps = [ &quot;:task&quot;, ...省略... &quot;//modules/planning/tasks/deciders/abreast_decider:abreast_decider&quot;, ...省略... ], ) 添加task config 在modules/planning/proto中创建abreast_decider_config.proto文件。如： syntax = &quot;proto2&quot;; package apollo.planning; message AbreastDeciderConfig { optional double abreast_time = 1; optional double lateral_area = 2; optional double longitudinal_area = 3; } 生成proto_library。在modules/planning/proto/BUILD中生成对应的proto_library.如： proto_library( name = &quot;abreast_decider_config_lib&quot;, srcs = [ &quot;abreast_decider.proto&quot;, ], ) 在proto_library中添加依赖。如下： proto_library( name = &quot;planning_config_proto_lib&quot;, srcs = [ &quot;planning_config.proto&quot;, ], deps = [ ...省略... &quot;:abreast_decider_config_lib&quot; ], ) 在planning_config.pb.txt中添加默认配置。 default_task_config: { task_type: ABREAST_DECIDER abreast_decider_config { abreast_time: 60.0 lateral_area: 2.0 longitudinal_area: 10.0 } } 在modules/planning/proto/planning_config.proto中添加相关的task信息 import &quot;modules/planning/proto/abreast_decider_config.proto&quot; 添加TaskType： ABREAST_DECIDER = 22 添加task_config： AbreastDeciderConfig abreast_decider_config = 18;","categories":[],"tags":[],"author":"ShaneHan"},{"title":"Hexo博客搭建和自动化部署","slug":"Hexo/Hexo博客搭建和自动化部署","date":"2020-03-17T09:05:20.000Z","updated":"2020-12-29T08:50:29.210Z","comments":true,"path":"posts/96b0a1fd/","link":"","permalink":"http://shanehan.tech/posts/96b0a1fd/","excerpt":"","text":"Hexo博客搭建和自动化部署Hexo 是一款快速、简洁且高效的博客框架. 常用插件 hexo-asset-image 解决问题： hexo博客图片的问题在于，markdown文章使用的图片路径和hexo博客发布时的图片路径不一致。通常我们使用markdown书写博客时, 采用的方式是使用 格式插入图片，我们希望在生成博客时，可以将图片转换成正确的格式。 安装： npm install https://github.com/7ym0n/hexo-asset-image --sa 配置：只需要在_config.yml 中配置 post_asset_folder 为 true 即可。 abbrlink 解决问题： 解决hexo博客链接很长的问题。 常用工具 网站配色: 漂亮炫酷的配色网站 TODO 双语bolg: 添加中英文切换按钮 自动化部署 github 和服务器同步博客文件工具及教程 webhook 部署hexo ubuntu 自启服务","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://shanehan.tech/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://shanehan.tech/tags/hexo/"}],"author":"ShaneHan"}]}